apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'robolectric'


android {
    compileSdkVersion 20 
    buildToolsVersion "19.1.0"

    defaultConfig {
        applicationId "hm.orz.key0note.zaimcalendarinput"
        minSdkVersion 11
        targetSdkVersion 20
        versionCode 5
        versionName "1.1.1"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            debuggable true
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'LICENSE.txt'
        exclude 'NOTICE.txt'
        exclude 'license.txt'
        exclude 'notice.txt'
        exclude 'LICENSE'
        exclude 'NOTICE'
    }

    jacoco {
        version "0.7.1.201405082137"
    }
}

task findbugs(type: FindBugs) {
    excludeFilter = new File('config/findbugs/findbugs-exclude.xml')
    ignoreFailures = true
    classes = fileTree('build/intermediates/classes/debug/')
    source = fileTree('src/main/java/')
    classpath = files()
    effort = 'max'
    reports {
        xml.enabled = true
        xml {
            destination "build/reports/findbugs/findbugs.xml"
        }
    }
}

pmd {
  toolVersion = '4.3'
}

task pmd(type: Pmd) {
 
    description 'Run pmd'
    group 'verification'
 
    ruleSets = ["basic", "braces", "strings", "design", "unusedcode"]
    source = fileTree('src/main/java')
 
    reports {
	xml.enabled = true
        xml {
            destination "build/reports/pmd/pmd.xml"
        }
    }
}

robolectric {
    // configure the set of classes for JUnit tests
    include '**/unittest/*Test.class'
    exclude '**/espresso/**/*.class'

    // configure max heap size of the test JVM
    maxHeapSize = "2048m"

    // configure whether failing tests should fail the build
    ignoreFailures true

    // use afterTest to listen to the test execution results
    afterTest { descriptor, result ->
        println "Executing test for {$descriptor.name} with result: ${result.resultType}"
    }
}

def coverageSourceDirs = [
        '../app/src/main/java'
]

task jacocoTestReport(type:JacocoReport, dependsOn: "testDebug") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: '../app/build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('../app/build/reports/jacoco/testDebug.exec')

    reports {
        xml.enabled = true
        html.enabled = true
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile 'com.android.support:appcompat-v7:20.0.0'
    compile 'com.google.android.gms:play-services:6.+'
    // for OAuth
    compile 'oauth.signpost:signpost-core:1.2'
    compile 'oauth.signpost:signpost-commonshttp4:1.2'
    // for robolectirc
    androidTestCompile 'junit:junit:4.11'
    androidTestCompile 'org.robolectric:robolectric:2.4'
    androidTestCompile 'com.squareup:fest-android:1.0.+'
}
